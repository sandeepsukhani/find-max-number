// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sandlis/find-max-number/proto (interfaces: NumbersClient,Numbers_FindMaxNumberClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/sandlis/find-max-number/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockNumbersClient is a mock of NumbersClient interface
type MockNumbersClient struct {
	ctrl     *gomock.Controller
	recorder *MockNumbersClientMockRecorder
}

// MockNumbersClientMockRecorder is the mock recorder for MockNumbersClient
type MockNumbersClientMockRecorder struct {
	mock *MockNumbersClient
}

// NewMockNumbersClient creates a new mock instance
func NewMockNumbersClient(ctrl *gomock.Controller) *MockNumbersClient {
	mock := &MockNumbersClient{ctrl: ctrl}
	mock.recorder = &MockNumbersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNumbersClient) EXPECT() *MockNumbersClientMockRecorder {
	return m.recorder
}

// FindMaxNumber mocks base method
func (m *MockNumbersClient) FindMaxNumber(arg0 context.Context, arg1 ...grpc.CallOption) (proto.Numbers_FindMaxNumberClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindMaxNumber", varargs...)
	ret0, _ := ret[0].(proto.Numbers_FindMaxNumberClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMaxNumber indicates an expected call of FindMaxNumber
func (mr *MockNumbersClientMockRecorder) FindMaxNumber(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMaxNumber", reflect.TypeOf((*MockNumbersClient)(nil).FindMaxNumber), varargs...)
}

// MockNumbers_FindMaxNumberClient is a mock of Numbers_FindMaxNumberClient interface
type MockNumbers_FindMaxNumberClient struct {
	ctrl     *gomock.Controller
	recorder *MockNumbers_FindMaxNumberClientMockRecorder
}

// MockNumbers_FindMaxNumberClientMockRecorder is the mock recorder for MockNumbers_FindMaxNumberClient
type MockNumbers_FindMaxNumberClientMockRecorder struct {
	mock *MockNumbers_FindMaxNumberClient
}

// NewMockNumbers_FindMaxNumberClient creates a new mock instance
func NewMockNumbers_FindMaxNumberClient(ctrl *gomock.Controller) *MockNumbers_FindMaxNumberClient {
	mock := &MockNumbers_FindMaxNumberClient{ctrl: ctrl}
	mock.recorder = &MockNumbers_FindMaxNumberClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNumbers_FindMaxNumberClient) EXPECT() *MockNumbers_FindMaxNumberClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNumbers_FindMaxNumberClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNumbers_FindMaxNumberClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).Context))
}

// Header mocks base method
func (m *MockNumbers_FindMaxNumberClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).Header))
}

// Recv mocks base method
func (m *MockNumbers_FindMaxNumberClient) Recv() (*proto.FindMaxNumberResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.FindMaxNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNumbers_FindMaxNumberClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNumbers_FindMaxNumberClient) Send(arg0 *proto.FindMaxNumberRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockNumbers_FindMaxNumberClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockNumbers_FindMaxNumberClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockNumbers_FindMaxNumberClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNumbers_FindMaxNumberClient)(nil).Trailer))
}
